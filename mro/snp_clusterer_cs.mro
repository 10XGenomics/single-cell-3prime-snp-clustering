#
# Copyright (c) 2017 10X Genomics, Inc. All rights reserved.
#
@include "snp_clusterer.mro"

pipeline SNP_CLUSTERER_CS(
    in  path  reference_path,
    in  bam   possorted_genome_bam,
    in  tsv   cell_barcodes,
    in  map   align,
    in  int   min_snp_call_qual,
    in  int   min_bcs_per_snp,
    in  int   min_snp_obs,
    in  int   min_snp_base_qual,
    in  float base_error_rate,
    in  int   iterations                         "Number of sampling iterations",
    in  int   seed                               "Random seed",
    in  int   burn                               "Number of burn-in iterations",
    in  int   skip                               "Number of iterations to skip for thinning samples",
    in  int   min_depth                          "Minimum depth to use a locus",
    in  float min_posterior                      "Per-cell probability threshold",
    in  json  cluster_ground_truth,
    out h5    raw_allele_bc_matrices_h5,
    out path  raw_allele_bc_matrices_mex,
    out h5    likelihood_allele_bc_matrices_h5,
    out path  likelihood_allele_bc_matrices_mex,
    out vcf   variants,
    out json  summary,
)
{
    call SNP_CLUSTERER(
        reference_path       = self.reference_path,
        possorted_genome_bam = self.possorted_genome_bam,
        cell_barcodes        = self.cell_barcodes,
        align                = self.align,
        min_snp_call_qual    = self.min_snp_call_qual,
        min_bcs_per_snp      = self.min_bcs_per_snp,
        min_snp_obs          = self.min_snp_obs,
        min_snp_base_qual    = self.min_snp_base_qual,
        base_error_rate      = self.base_error_rate,
        iterations           = self.iterations,
        seed                 = self.seed,
        burn                 = self.burn,
        skip                 = self.skip,
        min_depth            = self.min_depth,
        min_posterior        = self.min_posterior,
        cluster_ground_truth = self.cluster_ground_truth,
    )

    return (
        raw_allele_bc_matrices_h5         = SNP_CLUSTERER.raw_allele_bc_matrices_h5,
        raw_allele_bc_matrices_mex        = SNP_CLUSTERER.raw_allele_bc_matrices_mex,
        likelihood_allele_bc_matrices_h5  = SNP_CLUSTERER.likelihood_allele_bc_matrices_h5,
        likelihood_allele_bc_matrices_mex = SNP_CLUSTERER.likelihood_allele_bc_matrices_mex,
        variants                          = SNP_CLUSTERER.variants,
        summary                           = SNP_CLUSTERER.summary,
    )
}
